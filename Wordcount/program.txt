import java.io.IOException;
import java.util.*;

import org.apache.hadoop.fs.Path;
import org.apache.hadoop.conf.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.mapreduce.*;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

public class WordCount {

	 public static class Map extends Mapper<LongWritable, Text, Text, IntWritable> {

		private final static IntWritable zero= new IntWritable(0);
	    private final static IntWritable one = new IntWritable(1);
	    private Text word = new Text();

	    public void map(LongWritable key, Text value, Context context) throws IOException, InterruptedException {
	    	String delims = "[-:#,/ ]+";
			String line = value.toString();		
			//String line1 = WordUtils.capitalize(line);		
			String line1 = line.toLowerCase();		
			boolean hackathon = false;		
			boolean java = false;		
			boolean dec = false;		
			boolean chicago = false;		
			StringTokenizer tokenizer = new StringTokenizer(line1, delims);		
			while (tokenizer.hasMoreElements()) {		
				String key1 = tokenizer.nextToken().toString();		
				word.set(key1);		
				if (key1.equalsIgnoreCase("hackathon")){		
				hackathon = true;		
				context.write(word, one);		
				}
				if (key1.equalsIgnoreCase("java")){		
				hackathon = true;		
				context.write(word, one);		
				}		
				if (key1.equalsIgnoreCase("dec")){		
				hackathon = true;		
				context.write(word, one);		
				}		
				if (key1.equalsIgnoreCase("chicago")){		
				hackathon = true;		
				context.write(word, one);		
				}
				System.out.println("StringTokenizer Output: " + key1);
			}

			if (! hackathon ){
			Text word1 = new Text("hackathon");
			context.write(word1, zero);
			}
			if (! java ){
			Text word1 = new Text("java");
			context.write(word1, zero);
			}
			if (! dec ){
			Text word1 = new Text("dec");
			context.write(word1, zero);
			}
			if (! chicago ){
		
			Text word1 = new Text("chicago");
		
			context.write(word1, zero);
			}
	//context.write();
	        }
	    }	        

	 public static class Reduce extends Reducer<Text, IntWritable, Text, IntWritable> {

	    public void reduce(Text key, Iterable<IntWritable> values, Context context)	throws IOException, InterruptedException {
	    //String key1 = key.toString();
	        int sum = 0;
	        for (IntWritable val : values){
	        sum += val.get();
	        }	        
	        context.write(key, new IntWritable(sum));
	    }
	 }
	        
	 public static void main(String[] args) throws Exception {

	    Configuration conf = new Configuration();	        
	    Job job = new Job(conf, "wordcount");
	    job.setJarByClass(WordCount.class);   
	    job.setOutputKeyClass(Text.class);
	    job.setOutputValueClass(IntWritable.class);	        

	    job.setMapperClass(Map.class);
	    job.setReducerClass(Reduce.class);
	      
	    job.setInputFormatClass(TextInputFormat.class);
	    job.setOutputFormatClass(TextOutputFormat.class);	        

	    FileInputFormat.addInputPath(job, new Path(args[0]));
	    FileOutputFormat.setOutputPath(job, new Path(args[1]));
	        
	    job.waitForCompletion(true);
	 }
	}
